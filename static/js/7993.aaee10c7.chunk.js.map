{"version":3,"file":"static/js/7993.aaee10c7.chunk.js","mappings":"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","sources":["features/HeatMap/HeatMap.js","../ [synthetic:base] ","../ [synthetic:es6/util/arrayiterator] ","../ [synthetic:util/defines] ","../ [synthetic:util/defineproperty] ","../ [synthetic:util/global] ","../ [synthetic:es6/symbol] ","../ [synthetic:es6/util/iteratorfromarray] ","../ [synthetic:util/polyfill] ","../node_modules/highcharts/modules/treemap.src.js","../ [synthetic:es6/array/values] "],"sourcesContent":["import { useContext, useRef, useState } from \"react\";\r\nimport { useLoaderData } from \"react-router\";\r\n\r\nimport Highcharts from \"highcharts/highstock\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport HighchartsTreeChart from \"highcharts/modules/treemap\";\r\nimport HighchartsExporting from \"highcharts/modules/exporting\";\r\n\r\nimport CurrencyContext from \"../../context/currecy-context\";\r\nimport DarkmodeContext from \"../../context/darkmode-context\";\r\nimport { formatPrice, roundToDecimals } from \"../../utils/cryptoUtils\";\r\n\r\nimport caretDown from \"../../assets/svg/caret-down.svg\";\r\nimport caretUp from \"../../assets/svg/caret-up.svg\";\r\nimport DropdownSelect from \"../../components/UI/DropdownSelect\";\r\n\r\nif (typeof Highcharts === \"object\") {\r\n  HighchartsTreeChart(Highcharts);\r\n  HighchartsExporting(Highcharts);\r\n}\r\n\r\nconst MARKET_CAP = \"Market Cap\";\r\nconst VOLUME_24H = \"Volume 24h\";\r\n\r\nconst HeatMap = () => {\r\n  const darkmodeCtx = useContext(DarkmodeContext);\r\n  const currencyCtx = useContext(CurrencyContext);\r\n  const { cryptocurrencies } = useLoaderData();\r\n  const [totalItems, setTotalItems] = useState(20);\r\n  const [blockSize, setBlockSize] = useState(MARKET_CAP);\r\n  const chartRef = useRef(null);\r\n\r\n  const heatMapData = cryptocurrencies\r\n    .slice(0, totalItems)\r\n    .map((cryptocurrency, index) => {\r\n      let value;\r\n      if (blockSize === MARKET_CAP) {\r\n        value = Number(cryptocurrency.marketCapUsd);\r\n      } else if (blockSize === VOLUME_24H) {\r\n        value = Number(cryptocurrency.volumeUsd24Hr);\r\n      }\r\n\r\n      return {\r\n        id: index,\r\n        name: cryptocurrency.name,\r\n        value: value,\r\n        color: cryptocurrency.changePercent24Hr > 0 ? \"#8DBE84\" : \"#B94A45\",\r\n\r\n        //Tooltip data:\r\n        price: formatPrice(\r\n          cryptocurrency.priceUsd,\r\n          currencyCtx.currentCurrency,\r\n          currencyCtx.currentCurrencyRate\r\n        ),\r\n        marketCap: formatPrice(\r\n          cryptocurrency.marketCapUsd,\r\n          currencyCtx.currentCurrency,\r\n          currencyCtx.currentCurrencyRate\r\n        ),\r\n        volume: formatPrice(\r\n          cryptocurrency.volumeUsd24Hr,\r\n          currencyCtx.currentCurrency,\r\n          currencyCtx.currentCurrencyRate\r\n        ),\r\n        symbol: cryptocurrency.symbol,\r\n        changePercent24Hr: cryptocurrency.changePercent24Hr,\r\n      };\r\n    });\r\n\r\n  const options = {\r\n    title: false,\r\n    tooltip: {\r\n      followPointer: true,\r\n      useHTML: true,\r\n      backgroundColor: \"#FFF\",\r\n      borderColor: \"black\",\r\n      borderRadius: 10,\r\n      border: 0,\r\n      shadow: false,\r\n      formatter: function () {\r\n        const changePercentIcon =\r\n          this.point.changePercent24Hr > 0\r\n            ? '<span class=\"text-white bg-green-500 font-medium rounded-md text-xs text-center inline-flex items-center ml-3\" style=\"padding: 2px 5px;\">' +\r\n              '<img class=\"fill-white w-3 h-3\" src=\"' +\r\n              caretUp +\r\n              '\" alt=\"Caret up icon\" />' +\r\n              roundToDecimals(this.point.changePercent24Hr, 2) +\r\n              \"%\" +\r\n              \"</span>\"\r\n            : '<span class=\"text-white bg-red-500 font-medium rounded-md text-xs text-center inline-flex items-center ml-3\" style=\"padding: 2px 5px;\">' +\r\n              '<img class=\"fill-white w-3 h-3\" src=\"' +\r\n              caretDown +\r\n              '\" alt=\"Caret down icon\" />' +\r\n              roundToDecimals(this.point.changePercent24Hr, 2) +\r\n              \"%\" +\r\n              \"</span>\";\r\n\r\n        return `\r\n            <div class=\"flex flex-col px-3 py-2 space-y-2\">\r\n              <h2 class=\"flex items-center font-bold text-base leading-none text-slate-700\">\r\n                ${this.point.name}\r\n                <span class=\"ml-2 text-xs font-medium bg-slate-400/10 rounded-md text-neutral-800\" style=\"padding: 2px 5px;\">${this.point.symbol}</span>\r\n              </h2>\r\n              <div class=\"text-sm text-slate-500\">\r\n                <span>Price:</span>\r\n                <span class=\"text-black font-semibold\">${this.point.price} ${changePercentIcon}</span>\r\n              </div>\r\n              <div class=\"text-sm text-slate-500\">\r\n                <span>Market cap:</span>\r\n                <span class=\"text-black font-semibold\">${this.point.marketCap}</span>\r\n              </div>\r\n              <div class=\"text-sm text-slate-500\">\r\n                <span>Volume:</span>\r\n                <span class=\"text-black font-semibold\">${this.point.volume}</span>\r\n              </div>\r\n\r\n            </div>\r\n        `;\r\n      },\r\n    },\r\n    chart: {\r\n      backgroundColor: \"transparent\",\r\n      height: 550,\r\n      margin: 0,\r\n    },\r\n    series: [\r\n      {\r\n        type: \"treemap\",\r\n        allowDrillToNode: true,\r\n        layoutAlgorithm: \"squarified\",\r\n        dataLabels: {\r\n          style: {\r\n            textOutline: \"none\",\r\n          },\r\n        },\r\n        data: heatMapData,\r\n        levels: [\r\n          {\r\n            level: 1,\r\n            borderWidth: 3,\r\n            borderColor: darkmodeCtx.isDarkmode\r\n              ? \"rgb(15 23 42 / 100%)\"\r\n              : \"#FFFFFF\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    navigation: {\r\n      buttonOptions: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        animation: false,\r\n      },\r\n    },\r\n  };\r\n\r\n  const toggleFullScreen = () => {\r\n    const chart = chartRef.current?.chart;\r\n    if (chart) {\r\n      chart.fullscreen.toggle();\r\n    }\r\n  };\r\n\r\n  const handleChangeTotalItems = (option) => {\r\n    setTotalItems(option);\r\n  };\r\n\r\n  const handleChangeBlockSize = (option) => {\r\n    setBlockSize(option);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex justify-between my-5\">\r\n        <div className=\"flex space-x-2\">\r\n          <DropdownSelect\r\n            value={`Crypto: ${totalItems}`}\r\n            options={[100, 50, 20]}\r\n            onChange={handleChangeTotalItems}\r\n            classes=\"text-xs\"\r\n          />\r\n          <DropdownSelect\r\n            value={`By: ${blockSize}`}\r\n            options={[MARKET_CAP, VOLUME_24H]}\r\n            onChange={handleChangeBlockSize}\r\n            classes=\"text-xs\"\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          onClick={toggleFullScreen}\r\n          className=\"flex items-center px-3 py-2 space-x-2 bg-slate-400/10 hover:bg-slate-400/20 rounded-md text-neutral-800 dark:text-neutral-300\"\r\n        >\r\n          <svg\r\n            viewBox=\"0 0 14 14\"\r\n            className=\"w-3 h-3 text-neutral-500\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M1 4.62V1.666h2.917m6.166 0H13v2.952m0 4.762v2.952h-2.917m-6.166 0H1V9.381\"\r\n              stroke=\"#A6B0C3\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            />\r\n          </svg>\r\n          <span className=\"text-xs font-medium\">Fullscreen</span>\r\n        </button>\r\n      </div>\r\n\r\n      <HighchartsReact\r\n        highcharts={Highcharts}\r\n        options={options}\r\n        ref={chartRef}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeatMap;\r\n",null,null,null,null,null,null,null,null,"/**\n * @license Highcharts JS v11.0.1 (2023-05-08)\n *\n * (c) 2014-2021 Highsoft AS\n * Authors: Jon Arild Nygard / Oystein Moseng\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/treemap', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(\n                    new CustomEvent(\n                        'HighchartsModuleLoaded',\n                        { detail: { path: path, module: obj[path] }\n                    })\n                );\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/ColorMapComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: columnProto } } = SeriesRegistry.seriesTypes;\n        const { addEvent, defined } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ColorMapComposition;\n        (function (ColorMapComposition) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            ColorMapComposition.pointMembers = {\n                dataLabelOnNull: true,\n                moveToTopOnHover: true,\n                isValid: pointIsValid\n            };\n            ColorMapComposition.seriesMembers = {\n                colorKey: 'value',\n                axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n                parallelArrays: ['x', 'y', 'value'],\n                pointArrayMap: ['value'],\n                trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n                colorAttribs: seriesColorAttribs,\n                pointAttribs: columnProto.pointAttribs\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                const PointClass = SeriesClass.prototype.pointClass;\n                if (U.pushUnique(composedMembers, PointClass)) {\n                    addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n                }\n                return SeriesClass;\n            }\n            ColorMapComposition.compose = compose;\n            /**\n             * Move points to the top of the z-index order when hovered.\n             * @private\n             */\n            function onPointAfterSetState(e) {\n                const point = this;\n                if (point.moveToTopOnHover && point.graphic) {\n                    point.graphic.attr({\n                        zIndex: e && e.state === 'hover' ? 1 : 0\n                    });\n                }\n            }\n            /**\n             * Color points have a value option that determines whether or not it is\n             * a null point\n             * @private\n             */\n            function pointIsValid() {\n                return (this.value !== null &&\n                    this.value !== Infinity &&\n                    this.value !== -Infinity &&\n                    // undefined is allowed, but NaN is not (#17279)\n                    (this.value === void 0 || !isNaN(this.value)));\n            }\n            /**\n             * Get the color attibutes to apply on the graphic\n             * @private\n             * @function Highcharts.colorMapSeriesMixin.colorAttribs\n             * @param {Highcharts.Point} point\n             * @return {Highcharts.SVGAttributes}\n             *         The SVG attributes\n             */\n            function seriesColorAttribs(point) {\n                const ret = {};\n                if (defined(point.color) &&\n                    (!point.state || point.state === 'normal') // #15746\n                ) {\n                    ret[this.colorProp || 'fill'] = point.color;\n                }\n                return ret;\n            }\n        })(ColorMapComposition || (ColorMapComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorMapComposition;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapAlgorithmGroup.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class TreemapAlgorithmGroup {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(h, w, d, p) {\n                this.height = h;\n                this.width = w;\n                this.plot = p;\n                this.direction = d;\n                this.startDirection = d;\n                this.total = 0;\n                this.nW = 0;\n                this.lW = 0;\n                this.nH = 0;\n                this.lH = 0;\n                this.elArr = [];\n                this.lP = {\n                    total: 0,\n                    lH: 0,\n                    nH: 0,\n                    lW: 0,\n                    nW: 0,\n                    nR: 0,\n                    lR: 0,\n                    aspectRatio: function (w, h) {\n                        return Math.max((w / h), (h / w));\n                    }\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            addElement(el) {\n                this.lP.total = this.elArr[this.elArr.length - 1];\n                this.total = this.total + el;\n                if (this.direction === 0) {\n                    // Calculate last point old aspect ratio\n                    this.lW = this.nW;\n                    this.lP.lH = this.lP.total / this.lW;\n                    this.lP.lR = this.lP.aspectRatio(this.lW, this.lP.lH);\n                    // Calculate last point new aspect ratio\n                    this.nW = this.total / this.height;\n                    this.lP.nH = this.lP.total / this.nW;\n                    this.lP.nR = this.lP.aspectRatio(this.nW, this.lP.nH);\n                }\n                else {\n                    // Calculate last point old aspect ratio\n                    this.lH = this.nH;\n                    this.lP.lW = this.lP.total / this.lH;\n                    this.lP.lR = this.lP.aspectRatio(this.lP.lW, this.lH);\n                    // Calculate last point new aspect ratio\n                    this.nH = this.total / this.width;\n                    this.lP.nW = this.lP.total / this.nH;\n                    this.lP.nR = this.lP.aspectRatio(this.lP.nW, this.nH);\n                }\n                this.elArr.push(el);\n            }\n            reset() {\n                this.nW = 0;\n                this.lW = 0;\n                this.elArr = [];\n                this.total = 0;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapAlgorithmGroup;\n    });\n    _registerModule(_modules, 'Series/DrawPointUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Handles the drawing of a component.\n         * Can be used for any type of component that reserves the graphic property,\n         * and provides a shouldDraw on its context.\n         *\n         * @private\n         *\n         * @todo add type checking.\n         * @todo export this function to enable usage\n         */\n        function draw(point, params) {\n            const { animatableAttribs, onComplete, css, renderer } = params;\n            const animation = (point.series && point.series.chart.hasRendered) ?\n                // Chart-level animation on updates\n                void 0 :\n                // Series-level animation on new points\n                (point.series &&\n                    point.series.options.animation);\n            let graphic = point.graphic;\n            params.attribs = Object.assign(Object.assign({}, params.attribs), { 'class': point.getClassName() }) || {};\n            if ((point.shouldDraw())) {\n                if (!graphic) {\n                    point.graphic = graphic = params.shapeType === 'text' ?\n                        renderer.text() :\n                        renderer[params.shapeType](params.shapeArgs || {});\n                    graphic.add(params.group);\n                }\n                if (css) {\n                    graphic.css(css);\n                }\n                graphic\n                    .attr(params.attribs)\n                    .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n            }\n            else if (graphic) {\n                const destroy = () => {\n                    point.graphic = graphic = (graphic && graphic.destroy());\n                    if (typeof onComplete === 'function') {\n                        onComplete();\n                    }\n                };\n                // animate only runs complete callback if something was animated.\n                if (Object.keys(animatableAttribs).length) {\n                    graphic.animate(animatableAttribs, void 0, () => destroy());\n                }\n                else {\n                    destroy();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DrawPointUtilities = {\n            draw\n        };\n\n        return DrawPointUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapPoint.js', [_modules['Series/DrawPointUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DPU, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: { pointClass: Point } }, seriesTypes: { pie: { prototype: { pointClass: PiePoint } }, scatter: { prototype: { pointClass: ScatterPoint } } } } = SeriesRegistry;\n        const { extend, isNumber, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class TreemapPoint extends ScatterPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.name = void 0;\n                this.node = void 0;\n                this.options = void 0;\n                this.series = void 0;\n                this.shapeType = 'rect';\n                this.value = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            draw(params) {\n                DPU.draw(this, params);\n            }\n            getClassName() {\n                let className = Point.prototype.getClassName.call(this), series = this.series, options = series.options;\n                // Above the current level\n                if (this.node.level <= series.nodeMap[series.rootNode].level) {\n                    className += ' highcharts-above-level';\n                }\n                else if (!this.node.isLeaf &&\n                    !pick(options.interactByLeaf, !options.allowTraversingTree)) {\n                    className += ' highcharts-internal-node-interactive';\n                }\n                else if (!this.node.isLeaf) {\n                    className += ' highcharts-internal-node';\n                }\n                return className;\n            }\n            /**\n             * A tree point is valid if it has han id too, assume it may be a parent\n             * item.\n             *\n             * @private\n             * @function Highcharts.Point#isValid\n             */\n            isValid() {\n                return Boolean(this.id || isNumber(this.value));\n            }\n            setState(state) {\n                Point.prototype.setState.call(this, state);\n                // Graphic does not exist when point is not visible.\n                if (this.graphic) {\n                    this.graphic.attr({\n                        zIndex: state === 'hover' ? 1 : 0\n                    });\n                }\n            }\n            shouldDraw() {\n                return isNumber(this.plotY) && this.y !== null;\n            }\n        }\n        extend(TreemapPoint.prototype, {\n            setVisible: PiePoint.prototype.setVisible\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapPoint;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { objectEach } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var TreemapUtilities;\n        (function (TreemapUtilities) {\n            TreemapUtilities.AXIS_MAX = 100;\n            /* eslint-disable no-invalid-this, valid-jsdoc */\n            /**\n             * @todo Similar to eachObject, this function is likely redundant\n             */\n            function isBoolean(x) {\n                return typeof x === 'boolean';\n            }\n            TreemapUtilities.isBoolean = isBoolean;\n            /**\n             * @todo Similar to recursive, this function is likely redundant\n             */\n            function eachObject(list, func, context) {\n                context = context || this;\n                objectEach(list, function (val, key) {\n                    func.call(context, val, key, list);\n                });\n            }\n            TreemapUtilities.eachObject = eachObject;\n            /**\n             * @todo find correct name for this function.\n             * @todo Similar to reduce, this function is likely redundant\n             */\n            function recursive(item, func, context = this) {\n                let next;\n                next = func.call(context, item);\n                if (next !== false) {\n                    recursive(next, func, context);\n                }\n            }\n            TreemapUtilities.recursive = recursive;\n        })(TreemapUtilities || (TreemapUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapUtilities;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, isArray, isNumber, isObject, merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            const variateColor = (color) => {\n                const colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            let result = {}, defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce((obj, item) => {\n                        let level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            let childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach((child, i) => {\n                const newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            const value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            let rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const TreeUtilities = {\n            getColor,\n            getLevelOptions,\n            setTreeValues,\n            updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Breadcrumbs/BreadcrumbsDefaults.js', [], function () {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * @since   10.0.0\n             * @product highcharts\n             *\n             * @private\n             */\n            mainBreadcrumb: 'Main'\n        };\n        /**\n         * Options for breadcrumbs. Breadcrumbs general options are defined in\n         * `navigation.breadcrumbs`. Specific options for drilldown are set in\n         * `drilldown.breadcrumbs` and for tree-like series traversing, in\n         * `plotOptions[series].breadcrumbs`.\n         *\n         * @since        10.0.0\n         * @product      highcharts\n         * @optionparent navigation.breadcrumbs\n         */\n        const options = {\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Themed, single button\n             *\n             * @type    {Highcharts.SVGAttributes}\n             * @since   10.0.0\n             * @product highcharts\n             */\n            buttonTheme: {\n                /** @ignore */\n                fill: 'none',\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                'stroke-width': 0,\n                /** @ignore */\n                zIndex: 7,\n                /** @ignore */\n                states: {\n                    select: {\n                        fill: 'none'\n                    }\n                },\n                style: {\n                    color: \"#334eff\" /* Palette.highlightColor80 */\n                }\n            },\n            /**\n             * The default padding for each button and separator in each direction.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            buttonSpacing: 5,\n            /**\n             * Fires when clicking on the breadcrumbs button. Two arguments are\n             * passed to the function. First breadcrumb button as an SVG element.\n             * Second is the breadcrumbs class, containing reference to the chart,\n             * series etc.\n             *\n             * ```js\n             * click: function(button, breadcrumbs) {\n             *   console.log(button);\n             * }\n             * ```\n             *\n             * Return false to stop default buttons click action.\n             *\n             * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n             * @since     10.0.0\n             * @apioption navigation.breadcrumbs.events.click\n             */\n            /**\n             * When the breadcrumbs are floating, the plot area will not move to\n             * make space for it. By default, the chart will not make space for the\n             * buttons. This property won't work when positioned in the middle.\n             *\n             * @sample highcharts/breadcrumbs/single-button\n             *         Floating button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            floating: false,\n            /**\n             * A format string for the breadcrumbs button. Variables are enclosed by\n             * curly brackets. Available values are passed in the declared point\n             * options.\n             *\n             * @type      {string|undefined}\n             * @since 10.0.0\n             * @default   undefined\n             * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n             *          values in breadcrumb button.\n             */\n            format: void 0,\n            /**\n             * Callback function to format the breadcrumb text from scratch.\n             *\n             * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n             * @since     10.0.0\n             * @default   undefined\n             * @apioption navigation.breadcrumbs.formatter\n             */\n            /**\n             * What box to align the button to. Can be either `plotBox` or\n             * `spacingBox`.\n             *\n             * @type    {Highcharts.ButtonRelativeToValue}\n             * @default plotBox\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            relativeTo: 'plotBox',\n            /**\n             * Whether to reverse the order of buttons. This is common in Arabic\n             * and Hebrew.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/rtl\n             *         Breadcrumbs in RTL\n             *\n             * @type  {boolean}\n             * @since 10.2.0\n             */\n            rtl: false,\n            /**\n             * Positioning for the button row. The breadcrumbs buttons will be\n             * aligned properly for the default chart layout (title,  subtitle,\n             * legend, range selector) for the custom chart layout set the position\n             * properties.\n             *\n             * @sample  {highcharts} highcharts/breadcrumbs/single-button\n             *          Single, right aligned button\n             *\n             * @type    {Highcharts.BreadcrumbsAlignOptions}\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            position: {\n                /**\n                 * Horizontal alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * Vertical alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The X offset of the breadcrumbs button group.\n                 *\n                 * @type {number}\n                 */\n                x: 0,\n                /**\n                 * The Y offset of the breadcrumbs button group. When `undefined`,\n                 * and `floating` is `false`, the `y` position is adapted so that\n                 * the breadcrumbs are rendered outside the target area.\n                 *\n                 * @type {number|undefined}\n                 */\n                y: void 0\n            },\n            /**\n             * Options object for Breadcrumbs separator.\n             *\n             * @since 10.0.0\n             */\n            separator: {\n                /**\n                 * @type    {string}\n                 * @since   10.0.0\n                 * @product highcharts\n                 */\n                text: '/',\n                /**\n                 * CSS styles for the breadcrumbs separator.\n                 *\n                 * In styled mode, the breadcrumbs separators are styled by the\n                 * `.highcharts-separator` rule with its different states.\n                 *  @type  {Highcharts.CSSObject}\n                 *  @since 10.0.0\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                }\n            },\n            /**\n             * Show full path or only a single button.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Single, styled button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            showFullPath: true,\n            /**\n             * CSS styles for all breadcrumbs.\n             *\n             * In styled mode, the breadcrumbs buttons are styled by the\n             * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @type  {Highcharts.SVGAttributes}\n             * @since 10.0.0\n             */\n            style: {},\n            /**\n             * Whether to use HTML to render the breadcrumbs items texts.\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            useHTML: false,\n            /**\n             * The z index of the breadcrumbs group.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            zIndex: 7\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const BreadcrumbsDefaults = {\n            lang,\n            options\n        };\n\n        return BreadcrumbsDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Breadcrumbs/Breadcrumbs.js', [_modules['Extensions/Breadcrumbs/BreadcrumbsDefaults.js'], _modules['Core/Chart/Chart.js'], _modules['Core/FormatUtilities.js'], _modules['Core/Utilities.js']], function (BreadcrumbsDefaults, Chart, F, U) {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { addEvent, defined, extend, fireEvent, isString, merge, objectEach, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Shift the drillUpButton to make the space for resetZoomButton, #8095.\n         * @private\n         */\n        function onChartAfterShowResetZoom() {\n            const chart = this;\n            if (chart.breadcrumbs) {\n                const bbox = chart.resetZoomButton &&\n                    chart.resetZoomButton.getBBox(), breadcrumbsOptions = chart.breadcrumbs.options;\n                if (bbox &&\n                    breadcrumbsOptions.position.align === 'right' &&\n                    breadcrumbsOptions.relativeTo === 'plotBox') {\n                    chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n                }\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            if (this.breadcrumbs) {\n                this.breadcrumbs.destroy();\n                this.breadcrumbs = void 0;\n            }\n        }\n        /**\n         * Logic for making space for the buttons above the plot area\n         * @private\n         */\n        function onChartGetMargins() {\n            const breadcrumbs = this.breadcrumbs;\n            if (breadcrumbs &&\n                !breadcrumbs.options.floating &&\n                breadcrumbs.level) {\n                const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, breadcrumbsHeight = ((buttonTheme.height || 0) +\n                    2 * (buttonTheme.padding || 0) +\n                    breadcrumbsOptions.buttonSpacing), verticalAlign = breadcrumbsOptions.position.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n                    breadcrumbs.yOffset = breadcrumbsHeight;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.plotTop += breadcrumbsHeight;\n                    breadcrumbs.yOffset = -breadcrumbsHeight;\n                }\n                else {\n                    breadcrumbs.yOffset = void 0;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRedraw() {\n            this.breadcrumbs && this.breadcrumbs.redraw();\n        }\n        /**\n         * After zooming out, shift the drillUpButton to the previous position, #8095.\n         * @private\n         */\n        function onChartSelection(event) {\n            if (event.resetSelection === true &&\n                this.breadcrumbs) {\n                this.breadcrumbs.alignBreadcrumbsGroup();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Breadcrumbs class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Breadcrumbs\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         * @param {Highcharts.Options} userOptions\n         *        User options\n         */\n        class Breadcrumbs {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            static compose(ChartClass, highchartsDefaultOptions) {\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    addEvent(Chart, 'destroy', onChartDestroy);\n                    addEvent(Chart, 'afterShowResetZoom', onChartAfterShowResetZoom);\n                    addEvent(Chart, 'getMargins', onChartGetMargins);\n                    addEvent(Chart, 'redraw', onChartRedraw);\n                    addEvent(Chart, 'selection', onChartSelection);\n                }\n                if (U.pushUnique(composedMembers, highchartsDefaultOptions)) {\n                    // Add language support.\n                    extend(highchartsDefaultOptions.lang, BreadcrumbsDefaults.lang);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart, userOptions) {\n                this.elementList = {};\n                this.isDirty = true;\n                this.level = 0;\n                this.list = [];\n                const chartOptions = merge(chart.options.drilldown &&\n                    chart.options.drilldown.drillUpButton, Breadcrumbs.defaultOptions, chart.options.navigation && chart.options.navigation.breadcrumbs, userOptions);\n                this.chart = chart;\n                this.options = chartOptions || {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update Breadcrumbs properties, like level and list.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateProperties\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            updateProperties(list) {\n                this.setList(list);\n                this.setLevel();\n                this.isDirty = true;\n            }\n            /**\n             * Set breadcrumbs list.\n             * @function Highcharts.Breadcrumbs#setList\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} list\n             *        Breadcrumbs list.\n             */\n            setList(list) {\n                this.list = list;\n            }\n            /**\n             * Calcule level on which chart currently is.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#setLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            setLevel() {\n                this.level = this.list.length && this.list.length - 1;\n            }\n            /**\n             * Get Breadcrumbs level\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            getLevel() {\n                return this.level;\n            }\n            /**\n             * Default button text formatter.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getButtonText\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Breadcrumb.\n             * @return {string}\n             *         Formatted text.\n             */\n            getButtonText(breadcrumb) {\n                const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options, lang = chart.options.lang, textFormat = pick(breadcrumbsOptions.format, breadcrumbsOptions.showFullPath ?\n                    '{level.name}' : '← {level.name}'), defaultText = lang && pick(lang.drillUpText, lang.mainBreadcrumb);\n                let returnText = breadcrumbsOptions.formatter &&\n                    breadcrumbsOptions.formatter(breadcrumb) ||\n                    format(textFormat, { level: breadcrumb.levelOptions }, chart) || '';\n                if (((isString(returnText) &&\n                    !returnText.length) ||\n                    returnText === '← ') &&\n                    defined(defaultText)) {\n                    returnText = !breadcrumbsOptions.showFullPath ?\n                        '← ' + defaultText :\n                        defaultText;\n                }\n                return returnText;\n            }\n            /**\n             * Redraw.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#redraw\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            redraw() {\n                if (this.isDirty) {\n                    this.render();\n                }\n                if (this.group) {\n                    this.group.align();\n                }\n                this.isDirty = false;\n            }\n            /**\n             * Create a group, then draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#render\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            render() {\n                const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options;\n                // A main group for the breadcrumbs.\n                if (!breadcrumbs.group && breadcrumbsOptions) {\n                    breadcrumbs.group = chart.renderer\n                        .g('breadcrumbs-group')\n                        .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                        .attr({\n                        zIndex: breadcrumbsOptions.zIndex\n                    })\n                        .add();\n                }\n                // Draw breadcrumbs.\n                if (breadcrumbsOptions.showFullPath) {\n                    this.renderFullPathButtons();\n                }\n                else {\n                    this.renderSingleButton();\n                }\n                this.alignBreadcrumbsGroup();\n            }\n            /**\n             * Draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderFullPathButtons\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            renderFullPathButtons() {\n                // Make sure that only one type of button is visible.\n                this.destroySingleButton();\n                this.resetElementListState();\n                this.updateListElements();\n                this.destroyListElements();\n            }\n            /**\n             * Render Single button - when showFullPath is not used. The button is\n             * similar to the old drillUpButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n             */\n            renderSingleButton() {\n                const breadcrumbs = this, chart = breadcrumbs.chart, list = breadcrumbs.list, breadcrumbsOptions = breadcrumbs.options, buttonSpacing = breadcrumbsOptions.buttonSpacing;\n                // Make sure that only one type of button is visible.\n                this.destroyListElements();\n                // Draw breadcrumbs. Inital position for calculating the breadcrumbs\n                // group.\n                const posX = breadcrumbs.group ?\n                    breadcrumbs.group.getBBox().width :\n                    buttonSpacing, posY = buttonSpacing;\n                const previousBreadcrumb = list[list.length - 2];\n                if (!chart.drillUpButton && (this.level > 0)) {\n                    chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n                }\n                else if (chart.drillUpButton) {\n                    if (this.level > 0) {\n                        // Update button.\n                        this.updateSingleButton();\n                    }\n                    else {\n                        this.destroySingleButton();\n                    }\n                }\n            }\n            /**\n             * Update group position based on align and it's width.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            alignBreadcrumbsGroup(xOffset) {\n                const breadcrumbs = this;\n                if (breadcrumbs.group) {\n                    const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, positionOptions = breadcrumbsOptions.position, alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                        breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                        void 0 :\n                        'scrollablePlotBox'), bBox = breadcrumbs.group.getBBox(), additionalSpace = 2 * (buttonTheme.padding || 0) +\n                        breadcrumbsOptions.buttonSpacing;\n                    // Store positionOptions\n                    positionOptions.width = bBox.width + additionalSpace;\n                    positionOptions.height = bBox.height + additionalSpace;\n                    const newPositions = merge(positionOptions);\n                    // Add x offset if specified.\n                    if (xOffset) {\n                        newPositions.x += xOffset;\n                    }\n                    if (breadcrumbs.options.rtl) {\n                        newPositions.x += positionOptions.width;\n                    }\n                    newPositions.y = pick(newPositions.y, this.yOffset, 0);\n                    breadcrumbs.group.align(newPositions, true, alignTo);\n                }\n            }\n            /**\n             * Render a button.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#renderButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Current breadcrumb\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {SVGElement|void}\n             *        Returns the SVG button\n             */\n            renderButton(breadcrumb, posX, posY) {\n                const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n                const button = chart.renderer\n                    .button(breadcrumbs.getButtonText(breadcrumb), posX, posY, function (e) {\n                    // Extract events from button object and call\n                    const buttonEvents = breadcrumbsOptions.events &&\n                        breadcrumbsOptions.events.click;\n                    let callDefaultEvent;\n                    if (buttonEvents) {\n                        callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n                    }\n                    // (difference in behaviour of showFullPath and drillUp)\n                    if (callDefaultEvent !== false) {\n                        // For single button we are not going to the button\n                        // level, but the one level up\n                        if (!breadcrumbsOptions.showFullPath) {\n                            e.newLevel = breadcrumbs.level - 1;\n                        }\n                        else {\n                            e.newLevel = breadcrumb.level;\n                        }\n                        fireEvent(breadcrumbs, 'up', e);\n                    }\n                }, buttonTheme)\n                    .addClass('highcharts-breadcrumbs-button')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    button.attr(breadcrumbsOptions.style);\n                }\n                return button;\n            }\n            /**\n             * Render a separator.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#renderSeparator\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {Highcharts.SVGElement}\n             *        Returns the SVG button\n             */\n            renderSeparator(posX, posY) {\n                const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, separatorOptions = breadcrumbsOptions.separator;\n                const separator = chart.renderer\n                    .label(separatorOptions.text, posX, posY, void 0, void 0, void 0, false)\n                    .addClass('highcharts-breadcrumbs-separator')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    separator.css(separatorOptions.style);\n                }\n                return separator;\n            }\n            /**\n             * Update.\n             * @function Highcharts.Breadcrumbs#update\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} options\n             *        Breadcrumbs class.\n             * @param {boolean} redraw\n             *        Redraw flag\n             */\n            update(options) {\n                merge(true, this.options, options);\n                this.destroy();\n                this.isDirty = true;\n            }\n            /**\n             * Update button text when the showFullPath set to false.\n             * @function Highcharts.Breadcrumbs#updateSingleButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            updateSingleButton() {\n                const chart = this.chart, currentBreadcrumb = this.list[this.level - 1];\n                if (chart.drillUpButton) {\n                    chart.drillUpButton.attr({\n                        text: this.getButtonText(currentBreadcrumb)\n                    });\n                }\n            }\n            /**\n             * Destroy the chosen breadcrumbs group\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroy\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            destroy() {\n                this.destroySingleButton();\n                // Destroy elements one by one. It's necessary beacause\n                // g().destroy() does not remove added HTML\n                this.destroyListElements(true);\n                // Then, destroy the group itself.\n                if (this.group) {\n                    this.group.destroy();\n                }\n                this.group = void 0;\n            }\n            /**\n             * Destroy the elements' buttons and separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroyListElements\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            destroyListElements(force) {\n                const elementList = this.elementList;\n                objectEach(elementList, (element, level) => {\n                    if (force ||\n                        !elementList[level].updated) {\n                        element = elementList[level];\n                        element.button && element.button.destroy();\n                        element.separator && element.separator.destroy();\n                        delete element.button;\n                        delete element.separator;\n                        delete elementList[level];\n                    }\n                });\n                if (force) {\n                    this.elementList = {};\n                }\n            }\n            /**\n             * Destroy the single button if exists.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroySingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            destroySingleButton() {\n                if (this.chart.drillUpButton) {\n                    this.chart.drillUpButton.destroy();\n                    this.chart.drillUpButton = void 0;\n                }\n            }\n            /**\n             * Reset state for all buttons in elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#resetElementListState\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            resetElementListState() {\n                objectEach(this.elementList, (element) => {\n                    element.updated = false;\n                });\n            }\n            /**\n             * Update rendered elements inside the elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateListElements\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            updateListElements() {\n                const breadcrumbs = this, elementList = breadcrumbs.elementList, buttonSpacing = breadcrumbs.options.buttonSpacing, posY = buttonSpacing, list = breadcrumbs.list, rtl = breadcrumbs.options.rtl, rtlFactor = rtl ? -1 : 1, updateXPosition = function (element, spacing) {\n                    return rtlFactor * element.getBBox().width +\n                        rtlFactor * spacing;\n                }, adjustToRTL = function (element, posX, posY) {\n                    element.translate(posX - element.getBBox().width, posY);\n                };\n                // Inital position for calculating the breadcrumbs group.\n                let posX = breadcrumbs.group ?\n                    updateXPosition(breadcrumbs.group, buttonSpacing) :\n                    buttonSpacing, currentBreadcrumb, breadcrumb;\n                for (let i = 0, iEnd = list.length; i < iEnd; ++i) {\n                    const isLast = i === iEnd - 1;\n                    let button, separator;\n                    breadcrumb = list[i];\n                    if (elementList[breadcrumb.level]) {\n                        currentBreadcrumb = elementList[breadcrumb.level];\n                        button = currentBreadcrumb.button;\n                        // Render a separator if it was not created before.\n                        if (!currentBreadcrumb.separator &&\n                            !isLast) {\n                            // Add spacing for the next separator\n                            posX += rtlFactor * buttonSpacing;\n                            currentBreadcrumb.separator =\n                                breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                            }\n                            posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                        }\n                        else if (currentBreadcrumb.separator &&\n                            isLast) {\n                            currentBreadcrumb.separator.destroy();\n                            delete currentBreadcrumb.separator;\n                        }\n                        elementList[breadcrumb.level].updated = true;\n                    }\n                    else {\n                        // Render a button.\n                        button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                        if (rtl) {\n                            adjustToRTL(button, posX, posY);\n                        }\n                        posX += updateXPosition(button, buttonSpacing);\n                        // Render a separator.\n                        if (!isLast) {\n                            separator = breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(separator, posX, posY);\n                            }\n                            posX += updateXPosition(separator, buttonSpacing);\n                        }\n                        elementList[breadcrumb.level] = {\n                            button,\n                            separator,\n                            updated: true\n                        };\n                    }\n                    if (button) {\n                        button.setState(isLast ? 2 : 0);\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Breadcrumbs.defaultOptions = BreadcrumbsDefaults.options;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.BreadcrumbsClickCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @param {global.Event} e\n         * Event arguments.\n         */\n        /**\n         * Callback function to format the breadcrumb text from scratch.\n         *\n         * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @return {string}\n         * Formatted text or false\n         */\n        /**\n         * Options for the one breadcrumb.\n         *\n         * @interface Highcharts.BreadcrumbOptions\n         */\n        /**\n         * Level connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#level\n         * @type {number}\n         */\n        /**\n         * Options for series or point connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#levelOptions\n         * @type {SeriesOptions|PointOptionsObject}\n         */\n        /**\n         * Options for aligning breadcrumbs group.\n         *\n         * @interface Highcharts.BreadcrumbsAlignOptions\n         */\n        /**\n         * Align of a Breadcrumb group.\n         * @default right\n         * @name Highcharts.BreadcrumbsAlignOptions#align\n         * @type {AlignValue}\n         */\n        /**\n         * Vertical align of a Breadcrumb group.\n         * @default top\n         * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n         * @type {VerticalAlignValue}\n         */\n        /**\n         * X offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#x\n         * @type {number}\n         */\n        /**\n         * Y offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#y\n         * @type {number}\n         */\n        /**\n         * Options for all breadcrumbs.\n         *\n         * @interface Highcharts.BreadcrumbsOptions\n         */\n        /**\n         * Button theme.\n         * @name Highcharts.BreadcrumbsOptions#buttonTheme\n         * @type { SVGAttributes | undefined }\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Breadcrumbs;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Series/Treemap/TreemapUtilities.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, TreemapUtilities, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { series: Series } = SeriesRegistry;\n        const { addEvent, extend } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        let treemapAxisDefaultValues = false;\n        addEvent(Series, 'afterBindAxes', function () {\n            // eslint-disable-next-line no-invalid-this\n            let series = this, xAxis = series.xAxis, yAxis = series.yAxis, treeAxis;\n            if (xAxis && yAxis) {\n                if (series.is('treemap')) {\n                    treeAxis = {\n                        endOnTick: false,\n                        gridLineWidth: 0,\n                        lineWidth: 0,\n                        min: 0,\n                        // dataMin: 0,\n                        minPadding: 0,\n                        max: TreemapUtilities.AXIS_MAX,\n                        // dataMax: TreemapUtilities.AXIS_MAX,\n                        maxPadding: 0,\n                        startOnTick: false,\n                        title: void 0,\n                        tickPositions: []\n                    };\n                    extend(yAxis.options, treeAxis);\n                    extend(xAxis.options, treeAxis);\n                    treemapAxisDefaultValues = true;\n                }\n                else if (treemapAxisDefaultValues) {\n                    yAxis.setOptions(yAxis.userOptions);\n                    xAxis.setOptions(xAxis.userOptions);\n                    treemapAxisDefaultValues = false;\n                }\n            }\n        });\n\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapNode.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n        *\n        *  Class\n        *\n        * */\n        class TreemapNode {\n            constructor() {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                this.childrenTotal = 0;\n                this.visible = false;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            init(id, i, children, height, level, series, parent) {\n                this.id = id;\n                this.i = i;\n                this.children = children;\n                this.height = height;\n                this.level = level;\n                this.series = series;\n                this.parent = parent;\n                return this;\n            }\n        }\n        /* *\n        *\n        *  Default Export\n        *\n        * */\n\n        return TreemapNode;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeries.js', [_modules['Core/Color/Color.js'], _modules['Series/ColorMapComposition.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Treemap/TreemapAlgorithmGroup.js'], _modules['Series/Treemap/TreemapPoint.js'], _modules['Series/Treemap/TreemapUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Extensions/Breadcrumbs/Breadcrumbs.js'], _modules['Core/Utilities.js'], _modules['Series/Treemap/TreemapNode.js']], function (Color, ColorMapComposition, H, SeriesRegistry, TreemapAlgorithmGroup, TreemapPoint, TreemapUtilities, TU, Breadcrumbs, U, TreemapNode) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { series: Series, seriesTypes: { column: ColumnSeries, heatmap: HeatmapSeries, scatter: ScatterSeries } } = SeriesRegistry;\n        const { getColor, getLevelOptions, updateRootId } = TU;\n        const { addEvent, correctFloat, defined, error, extend, fireEvent, isArray, isNumber, isObject, isString, merge, pick, stableSort } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.treemap\n         *\n         * @augments Highcharts.Series\n         */\n        class TreemapSeries extends ScatterSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.axisRatio = void 0;\n                this.data = void 0;\n                this.mapOptionsToLevel = void 0;\n                this.nodeMap = void 0;\n                this.nodeList = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                this.rootNode = void 0;\n                this.tree = void 0;\n                this.level = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Function\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            algorithmCalcPoints(directionChange, last, group, childrenArea) {\n                let pX, pY, pW, pH, gW = group.lW, gH = group.lH, plot = group.plot, keep, i = 0, end = group.elArr.length - 1;\n                if (last) {\n                    gW = group.nW;\n                    gH = group.nH;\n                }\n                else {\n                    keep = group.elArr[group.elArr.length - 1];\n                }\n                group.elArr.forEach(function (p) {\n                    if (last || (i < end)) {\n                        if (group.direction === 0) {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pW = gW;\n                            pH = p / pW;\n                        }\n                        else {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pH = gH;\n                            pW = p / pH;\n                        }\n                        childrenArea.push({\n                            x: pX,\n                            y: pY,\n                            width: pW,\n                            height: correctFloat(pH)\n                        });\n                        if (group.direction === 0) {\n                            plot.y = plot.y + pH;\n                        }\n                        else {\n                            plot.x = plot.x + pW;\n                        }\n                    }\n                    i = i + 1;\n                });\n                // Reset variables\n                group.reset();\n                if (group.direction === 0) {\n                    group.width = group.width - gW;\n                }\n                else {\n                    group.height = group.height - gH;\n                }\n                plot.y = plot.parent.y + (plot.parent.height - group.height);\n                plot.x = plot.parent.x + (plot.parent.width - group.width);\n                if (directionChange) {\n                    group.direction = 1 - group.direction;\n                }\n                // If not last, then add uncalculated element\n                if (!last) {\n                    group.addElement(keep);\n                }\n            }\n            algorithmFill(directionChange, parent, children) {\n                let childrenArea = [], pTot, direction = parent.direction, x = parent.x, y = parent.y, width = parent.width, height = parent.height, pX, pY, pW, pH;\n                children.forEach(function (child) {\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    pX = x;\n                    pY = y;\n                    if (direction === 0) {\n                        pH = height;\n                        pW = pTot / pH;\n                        width = width - pW;\n                        x = x + pW;\n                    }\n                    else {\n                        pW = width;\n                        pH = pTot / pW;\n                        height = height - pH;\n                        y = y + pH;\n                    }\n                    childrenArea.push({\n                        x: pX,\n                        y: pY,\n                        width: pW,\n                        height: pH\n                    });\n                    if (directionChange) {\n                        direction = 1 - direction;\n                    }\n                });\n                return childrenArea;\n            }\n            algorithmLowAspectRatio(directionChange, parent, children) {\n                let childrenArea = [], series = this, pTot, plot = {\n                    x: parent.x,\n                    y: parent.y,\n                    parent: parent\n                }, direction = parent.direction, i = 0, end = children.length - 1, group = new TreemapAlgorithmGroup(parent.height, parent.width, direction, plot);\n                // Loop through and calculate all areas\n                children.forEach(function (child) {\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    group.addElement(pTot);\n                    if (group.lP.nR > group.lP.lR) {\n                        series.algorithmCalcPoints(directionChange, false, group, childrenArea, plot // @todo no supported\n                        );\n                    }\n                    // If last child, then calculate all remaining areas\n                    if (i === end) {\n                        series.algorithmCalcPoints(directionChange, true, group, childrenArea, plot // @todo not supported\n                        );\n                    }\n                    i = i + 1;\n                });\n                return childrenArea;\n            }\n            /**\n             * Over the alignment method by setting z index.\n             * @private\n             */\n            alignDataLabel(point, dataLabel, labelOptions) {\n                const style = labelOptions.style;\n                // #8160: Prevent the label from exceeding the point's\n                // boundaries in treemaps by applying ellipsis overflow.\n                // The issue was happening when datalabel's text contained a\n                // long sequence of characters without a whitespace.\n                if (style &&\n                    !defined(style.textOverflow) &&\n                    dataLabel.text &&\n                    dataLabel.getBBox().width > dataLabel.text.textWidth) {\n                    dataLabel.css({\n                        textOverflow: 'ellipsis',\n                        // unit (px) is required when useHTML is true\n                        width: style.width += 'px'\n                    });\n                }\n                ColumnSeries.prototype.alignDataLabel.apply(this, arguments);\n                if (point.dataLabel) {\n                    // point.node.zIndex could be undefined (#6956)\n                    point.dataLabel.attr({ zIndex: (point.node.zIndex || 0) + 1 });\n                }\n            }\n            /**\n             * Recursive function which calculates the area for all children of a\n             * node.\n             *\n             * @private\n             * @function Highcharts.Series#calculateChildrenAreas\n             *\n             * @param {Object} node\n             * The node which is parent to the children.\n             *\n             * @param {Object} area\n             * The rectangular area of the parent.\n             */\n            calculateChildrenAreas(parent, area) {\n                let series = this, options = series.options, mapOptionsToLevel = series.mapOptionsToLevel, level = mapOptionsToLevel[parent.level + 1], algorithm = pick((series[(level && level.layoutAlgorithm)] &&\n                    level.layoutAlgorithm), options.layoutAlgorithm), alternate = options.alternateStartingDirection, childrenValues = [], children;\n                // Collect all children which should be included\n                children = parent.children.filter(function (n) {\n                    return !n.ignore;\n                });\n                if (level && level.layoutStartingDirection) {\n                    area.direction = level.layoutStartingDirection === 'vertical' ?\n                        0 :\n                        1;\n                }\n                childrenValues = series[algorithm](area, children);\n                children.forEach(function (child, index) {\n                    const values = childrenValues[index];\n                    child.values = merge(values, {\n                        val: child.childrenTotal,\n                        direction: (alternate ? 1 - area.direction : area.direction)\n                    });\n                    child.pointValues = merge(values, {\n                        x: (values.x / series.axisRatio),\n                        // Flip y-values to avoid visual regression with csvCoord in\n                        // Axis.translate at setPointValues. #12488\n                        y: TreemapUtilities.AXIS_MAX - values.y - values.height,\n                        width: (values.width / series.axisRatio)\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        series.calculateChildrenAreas(child, child.values);\n                    }\n                });\n            }\n            /**\n            * Create level list.\n            *\n            * @requires  modules/breadcrumbs\n            *\n            * @function TreemapSeries#createList\n            * @param {TreemapSeries} this\n            *        Treemap Series class.\n            */\n            createList(e) {\n                const chart = this.chart, breadcrumbs = chart.breadcrumbs, list = [];\n                if (breadcrumbs) {\n                    let currentLevelNumber = 0;\n                    list.push({\n                        level: currentLevelNumber,\n                        levelOptions: chart.series[0]\n                    });\n                    let node = e.target.nodeMap[e.newRootId];\n                    const extraNodes = [];\n                    // When the root node is set and has parent,\n                    // recreate the path from the node tree.\n                    while (node.parent || node.parent === '') {\n                        extraNodes.push(node);\n                        node = e.target.nodeMap[node.parent];\n                    }\n                    extraNodes.reverse().forEach(function (node) {\n                        list.push({\n                            level: ++currentLevelNumber,\n                            levelOptions: node\n                        });\n                    });\n                    // If the list has only first element, we should clear it\n                    if (list.length <= 1) {\n                        list.length = 0;\n                    }\n                }\n                return list;\n            }\n            /**\n             * Extend drawDataLabels with logic to handle custom options related to\n             * the treemap series:\n             *\n             * - Points which is not a leaf node, has dataLabels disabled by\n             *   default.\n             *\n             * - Options set on series.levels is merged in.\n             *\n             * - Width of the dataLabel is set to match the width of the point\n             *   shape.\n             *\n             * @private\n             */\n            drawDataLabels() {\n                let series = this, mapOptionsToLevel = series.mapOptionsToLevel, points = series.points.filter(function (n) {\n                    return n.node.visible;\n                }), options, level;\n                points.forEach(function (point) {\n                    level = mapOptionsToLevel[point.node.level];\n                    // Set options to new object to avoid problems with scope\n                    options = { style: {} };\n                    // If not a leaf, then label should be disabled as default\n                    if (!point.node.isLeaf) {\n                        options.enabled = false;\n                    }\n                    // If options for level exists, include them as well\n                    if (level && level.dataLabels) {\n                        options = merge(options, level.dataLabels);\n                        series._hasPointLabels = true;\n                    }\n                    // Set dataLabel width to the width of the point shape.\n                    if (point.shapeArgs) {\n                        options.style.width = point.shapeArgs.width;\n                        if (point.dataLabel) {\n                            point.dataLabel.css({\n                                width: point.shapeArgs.width + 'px'\n                            });\n                        }\n                    }\n                    // Merge custom options with point options\n                    point.dlOptions = merge(options, point.options.dataLabels);\n                });\n                Series.prototype.drawDataLabels.call(this);\n            }\n            /**\n             * Override drawPoints\n             * @private\n             */\n            drawPoints(points = this.points) {\n                const series = this, chart = series.chart, renderer = chart.renderer, styledMode = chart.styledMode, options = series.options, shadow = styledMode ? {} : options.shadow, borderRadius = options.borderRadius, withinAnimationLimit = chart.pointCount < options.animationLimit, allowTraversingTree = options.allowTraversingTree;\n                points.forEach(function (point) {\n                    const levelDynamic = point.node.levelDynamic, animatableAttribs = {}, attribs = {}, css = {}, groupKey = 'level-group-' + point.node.level, hasGraphic = !!point.graphic, shouldAnimate = withinAnimationLimit && hasGraphic, shapeArgs = point.shapeArgs;\n                    // Don't bother with calculate styling if the point is not drawn\n                    if (point.shouldDraw()) {\n                        point.isInside = true;\n                        if (borderRadius) {\n                            attribs.r = borderRadius;\n                        }\n                        merge(true, // Extend object\n                        // Which object to extend\n                        shouldAnimate ? animatableAttribs : attribs, \n                        // Add shapeArgs to animate/attr if graphic exists\n                        hasGraphic ? shapeArgs : {}, \n                        // Add style attribs if !styleMode\n                        styledMode ?\n                            {} :\n                            series.pointAttribs(point, point.selected ? 'select' : void 0));\n                        // In styled mode apply point.color. Use CSS, otherwise the\n                        // fill used in the style sheet will take precedence over\n                        // the fill attribute.\n                        if (series.colorAttribs && styledMode) {\n                            // Heatmap is loaded\n                            extend(css, series.colorAttribs(point));\n                        }\n                        if (!series[groupKey]) {\n                            series[groupKey] = renderer.g(groupKey)\n                                .attr({\n                                // @todo Set the zIndex based upon the number of\n                                // levels, instead of using 1000\n                                zIndex: 1000 - (levelDynamic || 0)\n                            })\n                                .add(series.group);\n                            series[groupKey].survive = true;\n                        }\n                    }\n                    // Draw the point\n                    point.draw({\n                        animatableAttribs,\n                        attribs,\n                        css,\n                        group: series[groupKey],\n                        renderer,\n                        shadow,\n                        shapeArgs,\n                        shapeType: point.shapeType\n                    });\n                    // If setRootNode is allowed, set a point cursor on clickables &\n                    // add drillId to point\n                    if (allowTraversingTree && point.graphic) {\n                        point.drillId = options.interactByLeaf ?\n                            series.drillToByLeaf(point) :\n                            series.drillToByGroup(point);\n                    }\n                });\n            }\n            /**\n             * Finds the drill id for a parent node. Returns false if point should\n             * not have a click event.\n             * @private\n             */\n            drillToByGroup(point) {\n                let series = this, drillId = false;\n                if ((point.node.level - series.nodeMap[series.rootNode].level) ===\n                    1 &&\n                    !point.node.isLeaf) {\n                    drillId = point.id;\n                }\n                return drillId;\n            }\n            /**\n             * Finds the drill id for a leaf node. Returns false if point should not\n             * have a click event\n             * @private\n             */\n            drillToByLeaf(point) {\n                let series = this, drillId = false, nodeParent;\n                if ((point.node.parent !== series.rootNode) &&\n                    point.node.isLeaf) {\n                    nodeParent = point.node;\n                    while (!drillId) {\n                        nodeParent = series.nodeMap[nodeParent.parent];\n                        if (nodeParent.parent === series.rootNode) {\n                            drillId = nodeParent.id;\n                        }\n                    }\n                }\n                return drillId;\n            }\n            /**\n             * @todo remove this function at a suitable version.\n             * @private\n             */\n            drillToNode(id, redraw) {\n                error(32, false, void 0, { 'treemap.drillToNode': 'use treemap.setRootNode' });\n                this.setRootNode(id, redraw);\n            }\n            drillUp() {\n                const series = this, node = series.nodeMap[series.rootNode];\n                if (node && isString(node.parent)) {\n                    series.setRootNode(node.parent, true, { trigger: 'traverseUpButton' });\n                }\n            }\n            getExtremes() {\n                // Get the extremes from the value data\n                const { dataMin, dataMax } = Series.prototype.getExtremes\n                    .call(this, this.colorValueData);\n                this.valueMin = dataMin;\n                this.valueMax = dataMax;\n                // Get the extremes from the y data\n                return Series.prototype.getExtremes.call(this);\n            }\n            /**\n             * Creates an object map from parent id to childrens index.\n             *\n             * @private\n             * @function Highcharts.Series#getListOfParents\n             *\n             * @param {Highcharts.SeriesTreemapDataOptions} [data]\n             *        List of points set in options.\n             *\n             * @param {Array<string>} [existingIds]\n             *        List of all point ids.\n             *\n             * @return {Object}\n             *         Map from parent id to children index in data.\n             */\n            getListOfParents(data, existingIds) {\n                const arr = isArray(data) ? data : [], ids = isArray(existingIds) ? existingIds : [], listOfParents = arr.reduce(function (prev, curr, i) {\n                    const parent = pick(curr.parent, '');\n                    if (typeof prev[parent] === 'undefined') {\n                        prev[parent] = [];\n                    }\n                    prev[parent].push(i);\n                    return prev;\n                }, {\n                    '': [] // Root of tree\n                });\n                // If parent does not exist, hoist parent to root of tree.\n                TreemapUtilities.eachObject(listOfParents, function (children, parent, list) {\n                    if ((parent !== '') && (ids.indexOf(parent) === -1)) {\n                        children.forEach(function (child) {\n                            list[''].push(child);\n                        });\n                        delete list[parent];\n                    }\n                });\n                return listOfParents;\n            }\n            /**\n             * Creates a tree structured object from the series points.\n             * @private\n             */\n            getTree() {\n                const series = this, allIds = this.data.map(function (d) {\n                    return d.id;\n                }), parentList = series.getListOfParents(this.data, allIds);\n                series.nodeMap = {};\n                series.nodeList = [];\n                return series.buildTree('', -1, 0, parentList);\n            }\n            buildTree(id, index, level, list, parent) {\n                let series = this, children = [], point = series.points[index], height = 0, node, child;\n                // Actions\n                (list[id] || []).forEach(function (i) {\n                    child = series.buildTree(series.points[i].id, i, level + 1, list, id);\n                    height = Math.max(child.height + 1, height);\n                    children.push(child);\n                });\n                node = new series.NodeClass().init(id, index, children, height, level, series, parent);\n                children.forEach((child) => {\n                    child.parentNode = node;\n                });\n                series.nodeMap[node.id] = node;\n                series.nodeList.push(node);\n                if (point) {\n                    point.node = node;\n                    node.point = point;\n                }\n                return node;\n            }\n            /**\n             * Define hasData function for non-cartesian series. Returns true if the\n             * series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.processedXData.length; // != 0\n            }\n            init(chart, options) {\n                const series = this, breadcrumbsOptions = merge(options.drillUpButton, options.breadcrumbs);\n                let setOptionsEvent;\n                setOptionsEvent = addEvent(series, 'setOptions', function (event) {\n                    const options = event.userOptions;\n                    if (defined(options.allowDrillToNode) &&\n                        !defined(options.allowTraversingTree)) {\n                        options.allowTraversingTree = options.allowDrillToNode;\n                        delete options.allowDrillToNode;\n                    }\n                    if (defined(options.drillUpButton) &&\n                        !defined(options.traverseUpButton)) {\n                        options.traverseUpButton = options.drillUpButton;\n                        delete options.drillUpButton;\n                    }\n                });\n                Series.prototype.init.call(series, chart, options);\n                // Treemap's opacity is a different option from other series\n                delete series.opacity;\n                // Handle deprecated options.\n                series.eventsToUnbind.push(setOptionsEvent);\n                if (series.options.allowTraversingTree) {\n                    series.eventsToUnbind.push(addEvent(series, 'click', series.onClickDrillToNode));\n                    series.eventsToUnbind.push(addEvent(series, 'setRootNode', function (e) {\n                        const chart = series.chart;\n                        if (chart.breadcrumbs) {\n                            // Create a list using the event after drilldown.\n                            chart.breadcrumbs.updateProperties(series.createList(e));\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'update', function (e, redraw) {\n                        const breadcrumbs = this.chart.breadcrumbs;\n                        if (breadcrumbs && e.options.breadcrumbs) {\n                            breadcrumbs.update(e.options.breadcrumbs);\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'destroy', function destroyEvents(e) {\n                        const chart = this.chart;\n                        if (chart.breadcrumbs) {\n                            chart.breadcrumbs.destroy();\n                            if (!e.keepEventsForUpdate) {\n                                chart.breadcrumbs = void 0;\n                            }\n                        }\n                    }));\n                }\n                if (!chart.breadcrumbs) {\n                    chart.breadcrumbs = new Breadcrumbs(chart, breadcrumbsOptions);\n                }\n                series.eventsToUnbind.push(addEvent(chart.breadcrumbs, 'up', function (e) {\n                    const drillUpsNumber = this.level - e.newLevel;\n                    for (let i = 0; i < drillUpsNumber; i++) {\n                        series.drillUp();\n                    }\n                }));\n            }\n            /**\n             * Add drilling on the suitable points.\n             * @private\n             */\n            onClickDrillToNode(event) {\n                const series = this, point = event.point, drillId = point && point.drillId;\n                // If a drill id is returned, add click event and cursor.\n                if (isString(drillId)) {\n                    point.setState(''); // Remove hover\n                    series.setRootNode(drillId, true, { trigger: 'click' });\n                }\n            }\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                let series = this, mapOptionsToLevel = (isObject(series.mapOptionsToLevel) ?\n                    series.mapOptionsToLevel :\n                    {}), level = point && mapOptionsToLevel[point.node.level] || {}, options = this.options, attr, stateOptions = state && options.states && options.states[state] || {}, className = (point && point.getClassName()) || '', opacity;\n                // Set attributes by precedence. Point trumps level trumps series.\n                // Stroke width uses pick because it can be 0.\n                attr = {\n                    'stroke': (point && point.borderColor) ||\n                        level.borderColor ||\n                        stateOptions.borderColor ||\n                        options.borderColor,\n                    'stroke-width': pick(point && point.borderWidth, level.borderWidth, stateOptions.borderWidth, options.borderWidth),\n                    'dashstyle': (point && point.borderDashStyle) ||\n                        level.borderDashStyle ||\n                        stateOptions.borderDashStyle ||\n                        options.borderDashStyle,\n                    'fill': (point && point.color) || this.color\n                };\n                // Hide levels above the current view\n                if (className.indexOf('highcharts-above-level') !== -1) {\n                    attr.fill = 'none';\n                    attr['stroke-width'] = 0;\n                    // Nodes with children that accept interaction\n                }\n                else if (className.indexOf('highcharts-internal-node-interactive') !== -1) {\n                    opacity = pick(stateOptions.opacity, options.opacity);\n                    attr.fill = color(attr.fill).setOpacity(opacity).get();\n                    attr.cursor = 'pointer';\n                    // Hide nodes that have children\n                }\n                else if (className.indexOf('highcharts-internal-node') !== -1) {\n                    attr.fill = 'none';\n                }\n                else if (state) {\n                    // Brighten and hoist the hover nodes\n                    attr.fill = color(attr.fill)\n                        .brighten(stateOptions.brightness)\n                        .get();\n                }\n                return attr;\n            }\n            /**\n             * Set the node's color recursively, from the parent down.\n             * @private\n             */\n            setColorRecursive(node, parentColor, colorIndex, index, siblings) {\n                let series = this, chart = series && series.chart, colors = chart && chart.options && chart.options.colors, colorInfo, point;\n                if (node) {\n                    colorInfo = getColor(node, {\n                        colors: colors,\n                        index: index,\n                        mapOptionsToLevel: series.mapOptionsToLevel,\n                        parentColor: parentColor,\n                        parentColorIndex: colorIndex,\n                        series: series,\n                        siblings: siblings\n                    });\n                    point = series.points[node.i];\n                    if (point) {\n                        point.color = colorInfo.color;\n                        point.colorIndex = colorInfo.colorIndex;\n                    }\n                    // Do it all again with the children\n                    (node.children || []).forEach(function (child, i) {\n                        series.setColorRecursive(child, colorInfo.color, colorInfo.colorIndex, i, node.children.length);\n                    });\n                }\n            }\n            setPointValues() {\n                const series = this;\n                const { points, xAxis, yAxis } = series;\n                const styledMode = series.chart.styledMode;\n                // Get the crisp correction in classic mode. For this to work in\n                // styled mode, we would need to first add the shape (without x,\n                // y, width and height), then read the rendered stroke width\n                // using point.graphic.strokeWidth(), then modify and apply the\n                // shapeArgs. This applies also to column series, but the\n                // downside is performance and code complexity.\n                const getCrispCorrection = (point) => (styledMode ?\n                    0 :\n                    ((series.pointAttribs(point)['stroke-width'] || 0) % 2) / 2);\n                points.forEach(function (point) {\n                    const { pointValues: values, visible } = point.node;\n                    // Points which is ignored, have no values.\n                    if (values && visible) {\n                        const { height, width, x, y } = values;\n                        const crispCorr = getCrispCorrection(point);\n                        const x1 = Math.round(xAxis.toPixels(x, true)) - crispCorr;\n                        const x2 = Math.round(xAxis.toPixels(x + width, true)) - crispCorr;\n                        const y1 = Math.round(yAxis.toPixels(y, true)) - crispCorr;\n                        const y2 = Math.round(yAxis.toPixels(y + height, true)) - crispCorr;\n                        // Set point values\n                        const shapeArgs = {\n                            x: Math.min(x1, x2),\n                            y: Math.min(y1, y2),\n                            width: Math.abs(x2 - x1),\n                            height: Math.abs(y2 - y1)\n                        };\n                        point.plotX = shapeArgs.x + (shapeArgs.width / 2);\n                        point.plotY = shapeArgs.y + (shapeArgs.height / 2);\n                        point.shapeArgs = shapeArgs;\n                    }\n                    else {\n                        // Reset visibility\n                        delete point.plotX;\n                        delete point.plotY;\n                    }\n                });\n            }\n            /**\n             * Sets a new root node for the series.\n             *\n             * @private\n             * @function Highcharts.Series#setRootNode\n             *\n             * @param {string} id\n             * The id of the new root node.\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or not.\n             *\n             * @param {Object} [eventArguments]\n             * Arguments to be accessed in event handler.\n             *\n             * @param {string} [eventArguments.newRootId]\n             * Id of the new root.\n             *\n             * @param {string} [eventArguments.previousRootId]\n             * Id of the previous root.\n             *\n             * @param {boolean} [eventArguments.redraw]\n             * Whether to redraw the chart after.\n             *\n             * @param {Object} [eventArguments.series]\n             * The series to update the root of.\n             *\n             * @param {string} [eventArguments.trigger]\n             * The action which triggered the event. Undefined if the setRootNode is\n             * called directly.\n             *\n             * @emits Highcharts.Series#event:setRootNode\n             */\n            setRootNode(id, redraw, eventArguments) {\n                const series = this, eventArgs = extend({\n                    newRootId: id,\n                    previousRootId: series.rootNode,\n                    redraw: pick(redraw, true),\n                    series: series\n                }, eventArguments);\n                /**\n                 * The default functionality of the setRootNode event.\n                 *\n                 * @private\n                 * @param {Object} args The event arguments.\n                 * @param {string} args.newRootId Id of the new root.\n                 * @param {string} args.previousRootId Id of the previous root.\n                 * @param {boolean} args.redraw Whether to redraw the chart after.\n                 * @param {Object} args.series The series to update the root of.\n                 * @param {string} [args.trigger=undefined] The action which\n                 * triggered the event. Undefined if the setRootNode is called\n                 * directly.\n                     */\n                const defaultFn = function (args) {\n                    const series = args.series;\n                    // Store previous and new root ids on the series.\n                    series.idPreviousRoot = args.previousRootId;\n                    series.rootNode = args.newRootId;\n                    // Redraw the chart\n                    series.isDirty = true; // Force redraw\n                    if (args.redraw) {\n                        series.chart.redraw();\n                    }\n                };\n                // Fire setRootNode event.\n                fireEvent(series, 'setRootNode', eventArgs, defaultFn);\n            }\n            /**\n             * Workaround for `inactive` state. Since `series.opacity` option is\n             * already reserved, don't use that state at all by disabling\n             * `inactiveOtherPoints` and not inheriting states by points.\n             * @private\n             */\n            setState(state) {\n                this.options.inactiveOtherPoints = true;\n                Series.prototype.setState.call(this, state, false);\n                this.options.inactiveOtherPoints = false;\n            }\n            setTreeValues(tree) {\n                let series = this, options = series.options, idRoot = series.rootNode, mapIdToNode = series.nodeMap, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (TreemapUtilities.isBoolean(options.levelIsConstant) ?\n                    options.levelIsConstant :\n                    true), childrenTotal = 0, children = [], val, point = series.points[tree.i];\n                // First give the children some values\n                tree.children.forEach(function (child) {\n                    child = series.setTreeValues(child);\n                    children.push(child);\n                    if (!child.ignore) {\n                        childrenTotal += child.val;\n                    }\n                });\n                // Sort the children\n                stableSort(children, function (a, b) {\n                    return (a.sortIndex || 0) - (b.sortIndex || 0);\n                });\n                // Set the values\n                val = pick(point && point.options.value, childrenTotal);\n                if (point) {\n                    point.value = val;\n                }\n                extend(tree, {\n                    children: children,\n                    childrenTotal: childrenTotal,\n                    // Ignore this node if point is not visible\n                    ignore: !(pick(point && point.visible, true) && (val > 0)),\n                    isLeaf: tree.visible && !childrenTotal,\n                    levelDynamic: (tree.level - (levelIsConstant ? 0 : nodeRoot.level)),\n                    name: pick(point && point.name, ''),\n                    sortIndex: pick(point && point.sortIndex, -val),\n                    val: val\n                });\n                return tree;\n            }\n            sliceAndDice(parent, children) {\n                return this.algorithmFill(true, parent, children);\n            }\n            squarified(parent, children) {\n                return this.algorithmLowAspectRatio(true, parent, children);\n            }\n            strip(parent, children) {\n                return this.algorithmLowAspectRatio(false, parent, children);\n            }\n            stripes(parent, children) {\n                return this.algorithmFill(false, parent, children);\n            }\n            translate() {\n                let series = this, options = series.options, \n                // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series), rootNode, pointValues, seriesArea, tree, val;\n                // Call prototype function\n                Series.prototype.translate.call(series);\n                // @todo Only if series.isDirtyData is true\n                tree = series.tree = series.getTree();\n                rootNode = series.nodeMap[rootId];\n                if (rootId !== '' &&\n                    (!rootNode || !rootNode.children.length)) {\n                    series.setRootNode('', false);\n                    rootId = series.rootNode;\n                    rootNode = series.nodeMap[rootId];\n                }\n                series.mapOptionsToLevel = getLevelOptions({\n                    from: rootNode.level + 1,\n                    levels: options.levels,\n                    to: tree.height,\n                    defaults: {\n                        levelIsConstant: series.options.levelIsConstant,\n                        colorByPoint: options.colorByPoint\n                    }\n                });\n                // Parents of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode], function (node) {\n                    let next = false, p = node.parent;\n                    node.visible = true;\n                    if (p || p === '') {\n                        next = series.nodeMap[p];\n                    }\n                    return next;\n                });\n                // Children of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode].children, function (children) {\n                    let next = false;\n                    children.forEach(function (child) {\n                        child.visible = true;\n                        if (child.children.length) {\n                            next = (next || []).concat(child.children);\n                        }\n                    });\n                    return next;\n                });\n                series.setTreeValues(tree);\n                // Calculate plotting values.\n                series.axisRatio = (series.xAxis.len / series.yAxis.len);\n                series.nodeMap[''].pointValues = pointValues = {\n                    x: 0,\n                    y: 0,\n                    width: TreemapUtilities.AXIS_MAX,\n                    height: TreemapUtilities.AXIS_MAX\n                };\n                series.nodeMap[''].values = seriesArea = merge(pointValues, {\n                    width: (pointValues.width * series.axisRatio),\n                    direction: (options.layoutStartingDirection === 'vertical' ? 0 : 1),\n                    val: tree.val\n                });\n                series.calculateChildrenAreas(tree, seriesArea);\n                // Logic for point colors\n                if (!series.colorAxis &&\n                    !options.colorByPoint) {\n                    series.setColorRecursive(series.tree);\n                }\n                // Update axis extremes according to the root node.\n                if (options.allowTraversingTree) {\n                    val = rootNode.pointValues;\n                    series.xAxis.setExtremes(val.x, val.x + val.width, false);\n                    series.yAxis.setExtremes(val.y, val.y + val.height, false);\n                    series.xAxis.setScale();\n                    series.yAxis.setScale();\n                }\n                // Assign values to points.\n                series.setPointValues();\n            }\n        }\n        /**\n         * A treemap displays hierarchical data using nested rectangles. The data\n         * can be laid out in varying ways depending on options.\n         *\n         * @sample highcharts/demo/treemap-large-dataset/\n         *         Treemap\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster, connectEnds, connectNulls, dataSorting, dragDrop, jitter, marker\n         * @product      highcharts\n         * @requires     modules/treemap\n         * @optionparent plotOptions.treemap\n         */\n        TreemapSeries.defaultOptions = merge(ScatterSeries.defaultOptions, {\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.treemap.allowTraversingTree).\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowdrilltonode/\n             *         Enabled\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowtraversingtree/\n             *         Enabled\n             *\n             * @since     7.0.3\n             * @product   highcharts\n             */\n            allowTraversingTree: false,\n            animationLimit: 250,\n            /**\n             * The border radius for each treemap item.\n             */\n            borderRadius: 0,\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @optionparent plotOptions.treemap.breadcrumbs\n             */\n            /**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, event if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points\n             * (including markers and columns), is that animation is performed on\n             * updates. On the other hand, when the series contains more points than\n             * the crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away\n             * invisible points is to increase performance on large series.\n             *\n             * @type      {number}\n             * @default   300\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.cropThreshold\n             */\n            /**\n             * Fires on a request for change of root node for the tree, before the\n             * update is made. An event object is passed to the function, containing\n             * additional properties `newRootId`, `previousRootId`, `redraw` and\n             * `trigger`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-events-setrootnode/\n             *         Alert update information on setRootNode event.\n             *\n             * @type {Function}\n             * @default undefined\n             * @since 7.0.3\n             * @product highcharts\n             * @apioption plotOptions.treemap.events.setRootNode\n             */\n            /**\n             * This option decides if the user can interact with the parent nodes\n             * or just the leaf nodes. When this option is undefined, it will be\n             * true by default. However when allowTraversingTree is true, then it\n             * will be false by default.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-false/\n             *         False\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-true-and-allowtraversingtree/\n             *         InteractByLeaf and allowTraversingTree is true\n             *\n             * @type      {boolean}\n             * @since     4.1.2\n             * @product   highcharts\n             * @apioption plotOptions.treemap.interactByLeaf\n             */\n            /**\n             * The sort index of the point inside the treemap level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-sortindex/\n             *         Sort by years\n             *\n             * @type      {number}\n             * @since     4.1.10\n             * @product   highcharts\n             * @apioption plotOptions.treemap.sortIndex\n             */\n            /**\n             * A series specific or series type specific color set to apply instead\n             * of the global [colors](#colors) when\n             * [colorByPoint](#plotOptions.treemap.colorByPoint) is true.\n             *\n             * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colors\n             */\n            /**\n             * Whether to display this series type or specific series item in the\n             * legend.\n             */\n            showInLegend: false,\n            /**\n             * @ignore-option\n             */\n            marker: void 0,\n            /**\n             * When using automatic point colors pulled from the `options.colors`\n             * collection, this option determines whether the chart should receive\n             * one color per series or one color per point.\n             *\n             * @see [series colors](#plotOptions.treemap.colors)\n             *\n             * @since     2.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colorByPoint\n             */\n            colorByPoint: false,\n            /**\n             * @since 4.1.0\n             */\n            dataLabels: {\n                defer: false,\n                enabled: true,\n                formatter: function () {\n                    const point = this && this.point ?\n                        this.point :\n                        {}, name = isString(point.name) ? point.name : '';\n                    return name;\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            tooltip: {\n                headerFormat: '',\n                pointFormat: '<b>{point.name}</b>: {point.value}<br/>'\n            },\n            /**\n             * Whether to ignore hidden points when the layout algorithm runs.\n             * If `false`, hidden points will leave open spaces.\n             *\n             * @since 5.0.8\n             */\n            ignoreHiddenPoint: true,\n            /**\n             * This option decides which algorithm is used for setting position\n             * and dimensions of the points.\n             *\n             * @see [How to write your own algorithm](https://www.highcharts.com/docs/chart-and-series-types/treemap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/\n             *         SliceAndDice by default\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-stripes/\n             *         Stripes\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-squarified/\n             *         Squarified\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-strip/\n             *         Strip\n             *\n             * @since      4.1.0\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             */\n            layoutAlgorithm: 'sliceAndDice',\n            /**\n             * Defines which direction the layout algorithm will start drawing.\n             *\n             * @since       4.1.0\n             * @validvalue [\"vertical\", \"horizontal\"]\n             */\n            layoutStartingDirection: 'vertical',\n            /**\n             * Enabling this option will make the treemap alternate the drawing\n             * direction between vertical and horizontal. The next levels starting\n             * direction will always be the opposite of the previous.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-alternatestartingdirection-true/\n             *         Enabled\n             *\n             * @since 4.1.0\n             */\n            alternateStartingDirection: false,\n            /**\n             * Used together with the levels and allowTraversingTree options. When\n             * set to false the first level visible to be level one, which is\n             * dynamic when traversing the tree. Otherwise the level will be the\n             * same as the tree structure.\n             *\n             * @since 4.1.0\n             */\n            levelIsConstant: true,\n            /**\n             * Options for the button appearing when traversing down in a treemap.\n             *\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @deprecated\n             */\n            traverseUpButton: {\n                /**\n                 * The position of the button.\n                 */\n                position: {\n                    /**\n                     * Vertical alignment of the button.\n                     *\n                     * @type      {Highcharts.VerticalAlignValue}\n                     * @default   top\n                     * @product   highcharts\n                     * @apioption plotOptions.treemap.traverseUpButton.position.verticalAlign\n                     */\n                    /**\n                     * Horizontal alignment of the button.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'right',\n                    /**\n                     * Horizontal offset of the button.\n                     */\n                    x: -10,\n                    /**\n                     * Vertical offset of the button.\n                     */\n                    y: 10\n                }\n            },\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling dataLabels and borders\n             * @sample {highcharts} highcharts/demo/treemap-with-levels/\n             *         Different layoutAlgorithm\n             *\n             * @type      {Array<*>}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderColor\n             */\n            /**\n             * Set the dash style of the border of all the point which lies on the\n             * level. See\n             * [plotOptions.scatter.dashStyle](#plotoptions.scatter.dashstyle)\n             * for possible options.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderDashStyle\n             */\n            /**\n             * Can set the borderWidth on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderWidth\n             */\n            /**\n             * Can set a color on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.color\n             */\n            /**\n             * A configuration object to define how the color of a child varies from\n             * the parent's color. The variation is distributed among the children\n             * of node. For example when setting brightness, the brightness change\n             * will range from the parent's original brightness on the first child,\n             * to the amount set in the `to` setting on the last node. This allows a\n             * gradient-like color scheme that sets children out from each other\n             * while highlighting the grouping on treemaps and sectors on sunburst\n             * charts.\n             *\n             * @sample highcharts/demo/sunburst/\n             *         Sunburst with color variation\n             *\n             * @sample highcharts/series-treegraph/color-variation\n             *         Treegraph nodes with color variation\n             *\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type       {string}\n             * @since      6.0.0\n             * @product    highcharts\n             * @validvalue [\"brightness\"]\n             * @apioption  plotOptions.treemap.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation.to\n             */\n            /**\n             * Can set the options of dataLabels on each point which lies on the\n             * level.\n             * [plotOptions.treemap.dataLabels](#plotOptions.treemap.dataLabels) for\n             * possible values.\n             *\n             * @extends   plotOptions.treemap.dataLabels\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.dataLabels\n             */\n            /**\n             * Can set the layoutAlgorithm option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             * @apioption  plotOptions.treemap.levels.layoutAlgorithm\n             */\n            /**\n             * Can set the layoutStartingDirection option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"vertical\", \"horizontal\"]\n             * @apioption  plotOptions.treemap.levels.layoutStartingDirection\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling of both levels\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.level\n             */\n            // Presentational options\n            /**\n             * The color of the border surrounding each tree map item.\n             *\n             * @type {Highcharts.ColorString}\n             */\n            borderColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The width of the border surrounding each tree map item.\n             */\n            borderWidth: 1,\n            colorKey: 'colorValue',\n            /**\n             * The opacity of a point in treemap. When a point has children, the\n             * visibility of the children is determined by the opacity.\n             *\n             * @since 4.2.4\n             */\n            opacity: 0.15,\n            /**\n             * A wrapper object for all the series options in specific states.\n             *\n             * @extends plotOptions.heatmap.states\n             */\n            states: {\n                /**\n                 * Options for the hovered series\n                 *\n                 * @extends   plotOptions.heatmap.states.hover\n                 * @excluding halo\n                 */\n                hover: {\n                    /**\n                     * The border color for the hovered state.\n                     */\n                    borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * Brightness for the hovered point. Defaults to 0 if the\n                     * heatmap series is loaded first, otherwise 0.1.\n                     *\n                     * @type    {number}\n                     * @default undefined\n                     */\n                    brightness: HeatmapSeries ? 0 : 0.1,\n                    /**\n                     * @extends plotOptions.heatmap.states.hover.halo\n                     */\n                    halo: false,\n                    /**\n                     * The opacity of a point in treemap. When a point has children,\n                     * the visibility of the children is determined by the opacity.\n                     *\n                     * @since 4.2.4\n                     */\n                    opacity: 0.75,\n                    /**\n                     * The shadow option for hovered state.\n                     */\n                    shadow: false\n                }\n            },\n            legendSymbol: 'rectangle'\n        });\n        extend(TreemapSeries.prototype, {\n            buildKDTree: noop,\n            colorAttribs: ColorMapComposition.seriesMembers.colorAttribs,\n            colorKey: 'colorValue',\n            directTouch: true,\n            getExtremesFromAll: true,\n            getSymbol: noop,\n            optionalAxis: 'colorAxis',\n            parallelArrays: ['x', 'y', 'value', 'colorValue'],\n            pointArrayMap: ['value'],\n            pointClass: TreemapPoint,\n            NodeClass: TreemapNode,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            utils: {\n                recursive: TreemapUtilities.recursive\n            }\n        });\n        ColorMapComposition.compose(TreemapSeries);\n        SeriesRegistry.registerSeriesType('treemap', TreemapSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `treemap` series. If the [type](#series.treemap.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.treemap\n         * @excluding dataParser, dataURL, stack, dataSorting\n         * @product   highcharts\n         * @requires  modules/treemap\n         * @apioption series.treemap\n         */\n        /**\n         * An array of data points for the series. For the `treemap` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `value` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.treemap.turboThreshold),\n         *    this option is not available.\n         *    ```js\n         *      data: [{\n         *        value: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *      }, {\n         *        value: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *      }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.heatmap.data\n         * @excluding x, y, pointPadding\n         * @product   highcharts\n         * @apioption series.treemap.data\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the treemap.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.treemap.data.value\n         */\n        /**\n         * Serves a purpose only if a `colorAxis` object is defined in the chart\n         * options. This value will decide which color the point gets from the\n         * scale of the colorAxis.\n         *\n         * @type      {number}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.colorValue\n         */\n        /**\n         * Only for treemap. Use this option to build a tree structure. The\n         * value should be the id of the point which is the parent. If no points\n         * has a matching id, or this option is undefined, then the parent will\n         * be set to the root.\n         *\n         * @sample {highcharts} highcharts/point/parent/\n         *         Point parent\n         * @sample {highcharts} highcharts/demo/treemap-with-levels/\n         *         Example where parent id is not matching\n         *\n         * @type      {string}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.parent\n         */\n        ''; // adds doclets above to transpiled file\n\n        return TreemapSeries;\n    });\n    _registerModule(_modules, 'masters/modules/treemap.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Breadcrumbs/Breadcrumbs.js']], function (Highcharts, Breadcrumbs) {\n\n        const G = Highcharts;\n        G.Breadcrumbs = Breadcrumbs;\n        Breadcrumbs.compose(G.Chart, G.defaultOptions);\n\n    });\n}));"],"names":["Highcharts","HighchartsTreeChart","HighchartsExporting","MARKET_CAP","VOLUME_24H","HeatMap","darkmodeCtx","useContext","DarkmodeContext","currencyCtx","CurrencyContext","cryptocurrencies","useLoaderData","totalItems","setTotalItems","useState","blockSize","setBlockSize","chartRef","useRef","options","title","tooltip","followPointer","useHTML","backgroundColor","borderColor","borderRadius","border","shadow","formatter","changePercentIcon","this","point","changePercent24Hr","caretUp","roundToDecimals","caretDown","concat","name","symbol","price","marketCap","volume","chart","height","margin","series","type","allowDrillToNode","layoutAlgorithm","dataLabels","style","textOutline","data","slice","map","cryptocurrency","index","value","Number","marketCapUsd","volumeUsd24Hr","id","color","formatPrice","priceUsd","currentCurrency","currentCurrencyRate","levels","level","borderWidth","isDarkmode","navigation","buttonOptions","enabled","plotOptions","animation","_jsxs","_Fragment","children","className","_jsx","DropdownSelect","onChange","option","classes","onClick","toggleFullScreen","_chartRef$current","current","fullscreen","toggle","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","HighchartsReact","highcharts","ref","$jscomp","scope","arrayIteratorImpl","a","b","length","done","arrayIterator","next","ASSUME_ES5","ASSUME_NO_NATIVE_MAP","ASSUME_NO_NATIVE_SET","SIMPLE_FROUND_POLYFILL","ISOLATE_POLYFILLS","defineProperty","Object","defineProperties","c","Array","prototype","getGlobal","globalThis","window","self","global","Math","Error","SYMBOL_PREFIX","initSymbol","Symbol","SymbolClass","$jscomp$symbol$id_","configurable","writable","toString","TypeError","initSymbolIterator","iterator","iteratorPrototype","initSymbolAsyncIterator","asyncIterator","iteratorFromArray","String","e","polyfills","propertyToPolyfillSymbol","POLYFILL_PREFIX","IS_SYMBOL_NATIVE","polyfill","polyfillIsolated","polyfillUnisolated","split","w","t","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","path","module","_modules","column","seriesTypes","addEvent","defined","n","moveToTopOnHover","graphic","attr","zIndex","state","k","pointMembers","dataLabelOnNull","isValid","Infinity","isNaN","seriesMembers","colorKey","axisTypes","parallelArrays","pointArrayMap","trackerGroups","colorAttribs","colorProp","pointAttribs","compose","f","pointClass","pushUnique","constructor","width","plot","startDirection","direction","lH","nH","lW","nW","total","elArr","lP","nR","lR","aspectRatio","max","addElement","push","reset","draw","animatableAttribs","onComplete","css","renderer","g","hasRendered","l","attribs","assign","getClassName","shouldDraw","shapeType","text","shapeArgs","add","group","animate","isNew","destroy","keys","pie","scatter","extend","isNumber","pick","super","arguments","node","call","nodeMap","rootNode","isLeaf","interactByLeaf","allowTraversingTree","setState","plotY","y","setVisible","objectEach","AXIS_MAX","isBoolean","eachObject","recursive","undefined","isArray","isObject","merge","getColor","mapOptionsToLevel","parentColor","parentColorIndex","v","colors","siblings","p","points","r","I","i","colorByPoint","colorCount","C","styledMode","colorVariation","key","parse","brighten","to","get","colorIndex","getLevelOptions","from","defaults","reduce","levelIsConstant","setTreeValues","before","idRoot","mapIdToNode","levelDynamic","visible","forEach","val","childrenTotal","updateRootId","rootId","userOptions","lang","mainBreadcrumb","buttonTheme","padding","states","select","buttonSpacing","floating","format","relativeTo","rtl","position","align","verticalAlign","x","separator","fontSize","showFullPath","breadcrumbs","resetZoomButton","getBBox","alignBreadcrumbsGroup","marginBottom","yOffset","plotTop","redraw","resetSelection","R","S","fireEvent","J","isString","K","B","D","H","elementList","isDirty","list","drilldown","drillUpButton","defaultOptions","updateProperties","setList","setLevel","getLevel","getButtonText","drillUpText","levelOptions","render","addClass","renderFullPathButtons","renderSingleButton","destroySingleButton","resetElementListState","updateListElements","destroyListElements","renderButton","updateSingleButton","button","events","click","newLevel","renderSeparator","label","update","updated","h","translate","m","q","xAxis","yAxis","is","endOnTick","gridLineWidth","lineWidth","min","minPadding","maxPadding","startOnTick","tickPositions","setOptions","init","parent","noop","heatmap","correctFloat","error","T","M","U","L","A","z","stableSort","V","E","tree","nodeList","axisRatio","algorithmCalcPoints","F","u","algorithmFill","Q","algorithmLowAspectRatio","alignDataLabel","textOverflow","textWidth","dataLabel","calculateChildrenAreas","alternateStartingDirection","filter","ignore","layoutStartingDirection","values","pointValues","createList","target","newRootId","reverse","drawDataLabels","_hasPointLabels","dlOptions","drawPoints","pointCount","animationLimit","N","G","O","P","isInside","selected","survive","drillId","drillToByLeaf","drillToByGroup","drillToNode","setRootNode","drillUp","trigger","getExtremes","dataMin","dataMax","colorValueData","valueMin","valueMax","getListOfParents","indexOf","getTree","buildTree","NodeClass","parentNode","hasData","processedXData","traverseUpButton","opacity","eventsToUnbind","onClickDrillToNode","keepEventsForUpdate","dashstyle","borderDashStyle","setOpacity","cursor","brightness","setColorRecursive","setPointValues","round","toPixels","abs","plotX","previousRootId","idPreviousRoot","inactiveOtherPoints","sortIndex","sliceAndDice","squarified","strip","stripes","len","colorAxis","setExtremes","setScale","showInLegend","marker","defer","inside","headerFormat","pointFormat","ignoreHiddenPoint","hover","halo","legendSymbol","buildKDTree","directTouch","getExtremesFromAll","getSymbol","optionalAxis","utils","registerSeriesType","Breadcrumbs","Chart","exports","define"],"sourceRoot":""}